#!/usr/bin/env bash
#set -x

# Prevent repeated sourcing
if [ -n "${__MODULE_CHECK_FW_ERROR_COUNT__}" ]; then
  return
fi
__MODULE_CHECK_FW_ERROR_COUNT__="Loaded"

# check percentage remaining
function optane_check_FW_Error_Count() {
  local FNAME=$1        # File name to process
  local ERR_STATE=false # Used for error reporting

  # Exit the function with INFO message if the file to process doesn't exist
  if [[ ! -f ${FNAME} ]] ; then
    info_msg " Could not process '${FNAME}'. File not found"
    REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1)) # Increment the INFO count
    return
  fi

  # Get the DimmID and Current Value(FWError Count) fields from the input file
  while IFS='|' read -r DimmID Type CurrentValue
  do
    DimmID="$(echo ${DimmID})"
    CurrentValue=(${CurrentValue})

    # Check the FWErro Count

    if [[ ${CurrentValue} -lt 5 ]] && [[ ${CurrentValue} -ge 2 ]]
    then
      REPORT_COUNT_INFO=$((REPORT_COUNT_INFO+1))
      info_msg "DimmID ${DimmID} has ${CurrentValue} FwError Count"
    elif [[ ${CurrentValue} -lt 10 ]] && [[ ${CurrentValue} -ge 5 ]]
    then
      REPORT_COUNT_WARNINGS=$((REPORT_COUNT_WARNINGS+1))
      warn_msg "DimmID ${DimmID} has ${CurrentValue} FwError Count"
      ERR_STATE=true
    elif [[ ${CurrentValue} -ge 10 ]]
    then
      REPORT_COUNT_CRITICAL=$((REPORT_COUNT_CRITICAL+1))
      crit_msg "DimmID ${DimmID} has ${CurrentValue} FwError Count"
      ERR_STATE=true
    fi
  done <<<  "$(grep FwErrorCount ${FNAME})" # Obtain percent remaining from file

  # Return the final PASS/FAIL to the user
  if [ "${ERR_STATE}" = true ] ; then
    echo "${STR_FAIL} ${FUNCNAME[0]} : One or more PMem Modules have less than 100% life remaining."
    REPORT_COUNT_FAILED=$((REPORT_COUNT_FAILED+1))
  else
    echo "${STR_PASSED} ${FUNCNAME[0]} : All PMem Modules have 100% life remaining"
    REPORT_COUNT_PASSED=$((REPORT_COUNT_PASSED+1))
  fi
}

# Call the main function
optane_check_FW_Error_Count "${OUTPUT_PATH}/ipmctl_show_-sensor"

